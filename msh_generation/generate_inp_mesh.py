import math

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import beta

try:
    from config import xsize, ysize, alpha
except ImportError:
    xsize = 10
    ysize = 80
    alpha = 0.5


mat_num = {"bottom_b": 11, "top_b": 12,
           "right_b":13, "left_b":14 }

def denseboundspace(size, start, end, alpha):
    x = np.linspace(0, 1, size)
    return start + beta.cdf(x, 2.-alpha, 2.-alpha) * (end-start)

def create_point_kernel(size=10, start=0, end=1, alpha = 0.5):
    return denseboundspace(size, start, end, alpha)

def cartesian_coord(*arrays):
    grid = np.meshgrid(*arrays)
    coord_list = [entry.ravel() for entry in grid]
    points = np.vstack(coord_list).T
    return points

class CreateMeshFile(object):
    def __init__(self, fileobj, xsize, ysize, alpha):
        self.fileobj = fileobj
        self.xsize = xsize
        self.ysize = ysize
        self.alpha = alpha 
        self.object_count = 0
        self.n_x = 0
        self.n_y = 0
        self.cartesian_product = []
           

    def generate_points(self):
        """
        Generate points and write the total no. points to file.
        """
        # create spaced out points
        self.n_x = create_point_kernel(size=self.xsize, alpha=self.alpha);
        self.n_y = create_point_kernel(size=self.ysize,start = 0, end = 8, alpha=self.alpha);        
        # create cartesian coord with the points
        self.cartesian_product =  cartesian_coord(self.n_x, self.n_y)
        # claculating number of quad/line objects in inp
        num_sq_x = math.ceil((((self.xsize-1)*2)+1)/2) - 1
        total_sq = num_sq_x * (self.ysize-1)
        total_lines = ((self.xsize-1) * 2) + ((self.ysize-1) * 2) 
        # print first line
        self.fileobj.write("{} {} 0 0 0\n".format(self.xsize*self.ysize, total_sq+total_lines, 4))


    def write_point_coordinates(self):
        """
        Write all points from cartesian product to the file
        <#> <x> <y> <z=0>
        """
        offset = 0
        count = 0
        for y in range(0,self.ysize):
            # print("\n*** {}\n  ".format(y))
            for i in range(0,self.xsize):
                tmp = self.cartesian_product[i+offset]
                self.fileobj.write("{} {} {} 0\n".format(count, tmp[0], tmp[1]))
                count+=1
            offset+=self.xsize    


    def write_quad_box_numbers(self):
        """
        Write the sr. no. of each point forming a quadilateral (anti-clockwise)
        Serial numbers are as generated by self.write_point_coordinates.
        """
        # count = 0
        offset = 0
        n = self.xsize
        for i in range(0,self.ysize-1):
            for j in range(0,n-1):
                self.fileobj.write("{} -1 quad {} {} {} {}\n".format(self.object_count, j+offset, (j+offset)+1, ((j+offset)+1)+n, (j+offset)+n))
                self.object_count+=1
            offset+=n

    def write_boundary_lines(self):
        """
        Write all the points which forms the boundary. 
        The specific material number is given in the dict. mat_num.
        """
        counter = self.object_count
        # bottom boundary
        for i in range(self.xsize-1):
            self.fileobj.write("{} {} line {} {}\n".format(counter, mat_num["bottom_b"], i, i+1))
            counter+=1
        # top boundary
        tb_offset = (self.ysize-1)*self.xsize
        for i in range(self.xsize-1):
            self.fileobj.write("{} {} line {} {}\n".format(counter, mat_num["top_b"], i+tb_offset, (i+1)+tb_offset))
            counter+=1
        # left boundary
        left_b = list(range(0, tb_offset+1, self.xsize))
        for i in range(0, self.ysize-1):
            self.fileobj.write("{} {} line {} {}\n".format(counter, mat_num["left_b"], left_b[i], left_b[i+1]))
            counter+=1
        # right boundary
        right_b = [x+(self.xsize-1) for x in left_b]
        for i in range(0, self.ysize-1):
            self.fileobj.write("{} {} line {} {}\n".format(counter, mat_num["right_b"], right_b[i], right_b[i+1]))    
            counter+=1

    def create_inp_file(self):
        self.generate_points()
        self.write_point_coordinates()
        self.write_quad_box_numbers()
        self.write_boundary_lines()
        


if __name__ == '__main__':
    with open("channel.inp", "w") as fobj:
        print("Writing .inp file with size(x)={}, size(y)={}, alpha={}...".format(xsize, ysize, alpha), end="")
        inp = CreateMeshFile(fobj, xsize, ysize, alpha)
        print(" Done.")
        inp.create_inp_file()
